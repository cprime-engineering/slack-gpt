Business Owners


Business Owners are a small group of stakeholders who have the primary business and 
technical responsibility for governance, compliance, and return on investment (ROI) for a 
Solution developed by an Agile Release Train (ART). They are key stakeholders on the ART who 
must evaluate fitness for use and actively participate in certain ART events. The continuous 
involvement of the Business Owners throughout the PI serves as an important Guardrail to the 
budgetary spend of the ART. 
Responsibilities 
Prior to PI Planning 
*	Provide input to backlog refinement activities 
*	Participate in Pre-PI Planning as needed Understand and help ensure that business 
objectives are understood and agreed to by key stakeholders of the train, including the 
Release Train Engineer (RTE), Product Management, and System Architects 
*	Prepare to communicate the business context, including Milestones and significant 
external dependencies, such as those of Suppliers 

During PI Planning 
*	Provide relevant elements of the business context in the defined PI planning agenda 
timebox 
*	Are ready and available to participate in key activities, including the presentation of 
vision, draft plan review, assigning business value to team PI objectives, and approving 
final plans 
*	Play a primary role in the draft plan review, understanding the bigger picture and how 
these plans, when taken together, do or do not fulfill the current business objectives
*	Watch for significant external commitments and dependencies 
*	Actively circulate during planning, communicating business priorities to the teams, and 
maintaining agreement and alignment among the stakeholders regarding the key 
objectives of the train 
*	Participate in the management review and problem-solving meeting to review and 
adjust scope, resolve problems and compromise as necessary 

During the I & A
During the event, Business Owners help assess actual value achieved versus plan, and they 
participate in the problem-solving workshop that follows. 

During PI Execution
*	Actively participate in maintaining business and development alignment as priorities 
and scope inevitably change 
*	Attend the System Demo to view progress and provide feedback 
*	Attend Agile team Iteration Planning and Iteration Retrospective events, as required 
*	Participate in Release Management, focusing on scope, quality, deployment options, 
release, and market considerations 
*	adjusting the ARTÕs PI plans as needed Participate and provide feedback from the 
Solution Demo regarding the capabilities and subsystems being built by the ART 
*	Actively address impedimentsÑespecially those that escalate beyond the authority of 
the key stakeholders on the train 

Guide for the Assignment of Business 
Value

Business Value for quarterly objectives is the Business OwnerÕs (AKA Product Manager) 
perception on a scale of one to 10 of the business value a teamÕs quarterly objective delivers. 
Business value is assigned using a linear scale of 1 to 10, with 10 being high and 1 low. 
Assignment of business value serves two purposes:
1)	Helps the team understand priorities, team quarterly objectives with higher business 
value should be worked on first
2)	Creates alignment between the business owner and the team. The assignment of 
business value should be a conversation between the team and the business owner. 

There are few guides for the assignment of business value because it is completely based on 
the BOÕs perception. This can put much pressure on the BO and also can lead to situations 
where the business value does not serve its purpose of prioritization and alignment of 
expectations. 
How Many Quarterly Objectives?
Generally, a team should create 3 to 5 PI objectives. Too many team quarterly objectives could 
suggest the team lacks focus, less than 3 suggests the team may be Òputting all their eggs in 
one basket.Ó
Multiple Business Owners
If there are multiple business owners, they still assign only one business value to a business 
objective. The Business owners must talk among themselves and come to an agreement. 
Guidelines for Assigning Business Value
The suggestions made here for determining the assignment of business value is just 
thatÉsuggestions. These are arbitrary defaults. Before quarterly planning, we suggest the 
Program Manager or coach take the opportunity to sit down with the business owner and work 
out a guide for assignment business value.

10-8 direct 
impact
These objectives have direct market impact either increase market share, 
defend market share, or delight customers. Both customer facing objectives 
and enablers can fall into this category. For example, fixing a security 
defect that has resulted in negative press could have high business value. 
Also the team may be working on an enabler for a high value feature.
Generally a team should have only one 10 top value feature at most. 

These are outcomes that cannot Òfall off the tableÓ if the team gets 
overwhelmed

6-8 Indirect high 
impact
Ongoing enhancements to features and the system itself. Feature may not 
have immediate impact or visibility but will contribute value. Over the long 
run this is stuff we should be doing for either it will seem out of date from 
our customer point of view or technical debt will accumulate and reduce our 
velocity. 


4-6 Stuff we 
should do
Similar to 6 and 8 but the connection to value is less impactful
1-4 why are we 
doing this?
This range indicates the BO sees very low value in these objectives. Low 
values should spark a conversation between the team and the BO if there 
are differing perception on the value of an objective. These are objectives 
that may Òfall off the tableÓ if push comes to shove with team capacity and 
other higher value objectives. 


The following is an example of a guide created by Dave Cornelius for a Forbes article
https://www.forbes.com/sites/forbescoachescouncil/2023/02/13/assign-business-value-to-your-
program-increment-objectives/?sh=17a144022523

1.	(Low) Resolve a low-priority customer request
2.	Deliver MVP to validate customer interest or market viability
3.	Evaluate beta release with specific customer segment(s)
4.	Satisfy a compliance requirement
5.	(Medium) Improve customer experience by improving ease of use
6.	Improve system performance by 20%
7.	Improve system reliability by 20%
8.	Improve net promoter score (NPS) from passives (7-8) to promoters (9-10)
9.	Delight 60% of customer segments
10.	(High) Increase market share through a compelling solution

Business Owner Plan Review Guide
Summary
Do I know what I am getting for my money?

*	Are PI Objectives are written such that they are clearly understood by the BO?
*	Are PI Objectives are aligned to an outcome that is important to the BO?

Why Should I Believe this Plan?

*	Is the capacity supported by data?
*	Does the load takes into account historic reality?
*	Have dependencies been identified and commitments accepted?
*	Have Risks been identified and ROAMED?


Business Owners Play the Key Governance Role for an ART
A key governance function the Business Owners perform is the draft plan and final plan reviews 
during PI planning. While product management and product owners prioritize the backlogs, 
they do so in service to the needs of the enterprise (expressed by the strategic themes,  vision 
and Epics). The Business Owners are the ones writing the checks so to speak and therefore 
need to know what is being done with the money. During PI planning they want verify if the 
solution(s) delivered by the ART will be fit for purpose and if they can trust the plans the teams 
are presenting to them. 

PI Planning and the Business Owner (BO)
The whole point of PI Planning is for the Team to create and  present a credible and defensible 
plan to the Business Owner. The plan should clearly express to the business owner what value 
the team will deliver during the PI and to provide evidence the plan is credible. In simple terms 
the BO needs to three questions
1)	Do I clearly understand what the team plans to deliver during the PI (both to run the 
business and grow the business)
2)	Is the team delivering the right things?
3)	Why should I believe them?
Guidelines for Reviewing the PI Plans
Do I know what I am getting for my money? 
These two items simply check the BO understand what is being delivered and that it is aligned 
to an outcome the BO is accountable for. As a BO, simply ask, do I really know what I am getting 
and what I will see at the PI system demo?

PI Objectives are written such that they are clearly understood by the BO
PI objectives are a summary of a teamÕs business and technical goals for a PI and  
communicates to a business owner what they plan to do. While SAFe recommends 
writing PI objectives as SMART (Specific, Measurable, Achievable, Realistic and Time-
bound), we offer simpler advice, what does the BO need to hear from the team to 
clearly understand the value the team plans to deliver during the PI. 

PI Objectives are aligned to an outcome that important to the BO
The NWS vision is driven by our V2MOMs, FSA, Service Offerings and Run the Business 
(RTB) work. A PI objective should express some outcome that moves us closer to that 
vision. It is not enough to have a PI outcome such as Òdeliver configuration scriptÓ rather 
Òreduce set up time and improve setup accuracy by automating configuration process 
with configuration scriptÓ   This may seem a subtle difference, but it is important to  
demonstrate the objective is aligned to an outcome that is important to the BO

Why Should I Believe this Plan?
The plan is not a wild aspiration, it is intended to be a commitment. These checks verify there is 
sufficient supporting evidence for the plan to be credible and not just wishful thinking.

Capacity is supported by data
The Team capacity is total capacity for work the team has during the PI. For an existing 
team the best data is the teamÕs historical velocity. For example if  a team has an 
average historic velocity of 100 points per PI then the  teamÕs capacity should be 100 
points.  For a newly formed team or a team that has had a significant personal change, 
then they can use the SAFe normalized point calculation. Either way, the team should 
clearly express how they calculated their capacity for the upcoming PI.

Load takes into account historic  reality
Load is how much work a team has actually planned into their PI. For each iteration in 
the PI, It is the sum of the story points that a team has allocated to each sprint. Rules for 
judging the load:
1)	The load must never exceed the team capacity. My personal guideline is the load 
should never exceed 80% of capacity. 
2)	The load takes into account historic operations work. That is if a team has 50% 
operations responsibility then that team should only load themselves to half of 
their available capacity. Make sure to ask the team, historically what % of their 
work is ÒexpectedÓ but unplanned work. 

Dependencies Are Identified and commitments accepted
Unless the team lives in a bubble the team will have dependencies on other teams or 
individuals. Even for teams that do not depend on another team to create an artifact for 
them there are often dependencies on approvers and other decision makers. For this 
team to make an honest commitment to you, they will need a commitment from those 
that they depend on, that they can actually deliver on the dependency as planned. 


Team risks are identified and ROAMed
A team cannot make an honest commitment without knowing the risks. Risks are 
threats to the team delivering on the PI objectives. Risk can include dependencies on 
others that have not been resolved. For example, delivery on a PI objective depends on 
an approval by an individual who has not committed a date for their decision. For the 
draft plan risks should at least be identified. For the final plan, the risks should be 
ROAMed. 

There will be some risks the team cannot handle on their own and those should be put 
onto the program risk board.

Agile Guidance Playbook


Table of Contents
1	Preface	2
1.1	Fannie MaeÕs Agile Process Framework: Governance & Guidance	3
2	Agile Overview	4
2.1	Introduction to Agile	4
2.1.1	Agile Manifesto	4
2.1.2	Agile Principals	6
2.2	Enterprise Agile	7
2.2.1	Disciplined Agile Delivery by Scott Ambler	7
2.2.2	Scaled Agile Framework by Dean Leffingwell	8
3	Agile at Fannie Mae	9
3.1	Enterprise Agile at Fannie Mae	10
4	Agile Playbook	11
4.1	Warm Up	11
4.2	How to Capture Business Processes	11
4.2.1	How to Capture Business Processes in Use Cases	11
4.2.2	How to Prepare When Forming a Scrum Team	12
4.3	Initiation	14
4.3.1	How to Form a Scrum Team	14
4.4	Inception	16
4.4.1	How to Convert a Business Process to User Stories	16
4.4.2	How to Manage the Product Backlog	17
4.4.3	How to Manage the Release Backlog	18
4.5	Construction	19
4.5.1	How to Do Sprint Planning	19
4.5.2	How to Ensure Code Quality	20
4.5.3	How to Conduct a Retrospective	21
4.6	System Integration Testing (SIT)	22
4.7	User Acceptance Testing (UAT)	22
4.8	Implementation	22
5	Processes & Practices	22
5.1	Code Review	22
5.2	Pair Programming	23
5.3	Collective Code Ownership	24
5.4	Test Driven Development	25
5.5	Refactoring	25
5.6	Coding Standards	26
5.7	Continuous Integration	27
6	Solutions & Tools	27
6.1	Code Review	27
6.2	Pair Programming	27
6.3	Collective Code Ownership	27
6.4	Test Driven Development	27
6.5	Refactoring	27
6.6	Coding Standards	27
6.7	Continuous Integration	27
6.8	Fannie Mae Agile Training Recommendation	29
7	References	29
8	Glossary	29



1	Preface
The purpose of this playbook is to present to the Agile teams at Fannie Mae a consistent approach to 
successfully carry out an Agile software development project.  The playbook provides guidance that is 
consistent with the Agile Process and Governance developed by the Application Development Group at 
Fannie Mae.
Agile terms are defined in a Glossary section at the end of this document.
1.1	Fannie MaeÕs Agile Process Framework: Governance & Guidance
In order to roll out the Agile approach to its entire development organization, Fannie Mae recently 
developed the Software Development Lifecycle (SDLC) Agile Methodology, which is an instantiation of 
the Software Development Life Cycle (SDLC) Standard.  This Agile methodology, together with its 
supporting artifacts, such the Agile Deliverables Traceability Matrix and the Agile PQO Workbook, 
provides a consistent Agile development approach that aims to unify the heretofore fragmented Agile 
forays at Fannie Mae.  A recent assessment of the current state of Agile at Fannie Mae conducted by an 
outside vendor emphasized that institutionalizing a consistent approach is paramount to the success of 
an Agile Enterprise rollout.
The Fannie Mae Agile methodology adheres to the latest SDLC Governance framework that consists of 
49 controls to be conducted at myriad project checkpoints by the Project Quality Office (PQO).  Control 
points are points in the SDLC process where specific documents, tasks, and/or approvals are required 
and evidence of them must be maintained as proof of accomplishment.  The control points are meant as 
a check to ensure everything is in order before moving to the next step in a software development 
project.
That Agile methodology outlines the recommended procedure for Agile projects to meet those 
Governance controls.  It provides project teams with direction on how to perform Agile at Fannie Mae 
and stay in compliance with the SDLC standard.  The Governance controls have been customized to suite 
the Agile approach, which has significant differences with traditional Waterfall software development.
Furthermore, the Agile methodology delineates the role and responsibilities in an Agile project, the Agile 
project phases, the entrance and exit criteria for each phase, the activities in those phases, and how 
each activity should strive to meet Governance controls 
Whereas the above Agile methodology and its supporting artifacts focus on the Governance side of 
ensuring a consistent Agile approach at Fannie Mae, this Agile Playbook focuses on the Guidance side of 
this consistent Agile approach.  The playbook maintains consistency with the above-mentioned Software 
Development Lifecycle (SDLC) Agile Methodology.  
The guidance in this Agile Playbook is meant to point Agile teams at Fannie Mae to detailed guidance for 
the activities of an Agile software development project.  Some of the detailed guidance is explicitly 
stated in this playbook, while more is referenced via links to internal as well as external resources.
The playbook introduces the Òoff-the-shelfÓ Agile methods, both regular and scaled,  adopted by Fannie 
Mae, how those methods are adapted to suite the Fannie Mae development environment, the phases of 
an Agile project at Fannie Mae, and detailed realization (via concrete practices and tools) of the Agile 
activities at Fannie Mae. 
2	Agile Overview
2.1	Introduction to Agile
The term ÒAgileÓ software development was first introduced in 2001 by a group of leaders in the 
software community.  They had been independently practicing agile methods, such as Scrum and XP.  
They found out that their various methods had strong common aspects leading to a common vision of 
how to make traditional software development markedly more successful.
So they aimed at articulating that common vision to narrow, as much as possible, the differences among 
their methods and minimize any future fragmentation.  They discovered that they are all aiming at 
remedying the shortfalls of the traditional methods, such as Waterfall, that often lead to failure in too 
many software development projects.  Those shortfalls include: too much reliance on prescriptive 
processes as opposed to allowing teams to achieve collaborative high performance; letting artifacts 
(such as documents) other than quality, consumable code be the indicator of project progress; business 
stakeholders and technical resources becoming antagonists rather than partners; and resisting rather 
than welcoming necessary change.
2.1.1	Agile Manifesto
That common vision lead to an ÒAgile ManifestoÓ, which states the following:
 
What is striking about that manifesto is that for the first time ever it introduces ÒvaluesÓ to the realm of 
software methodology.  Furthermore, the manifesto does NOT negate the value of the items on the 
right Ð it just favors the items on the left, which the Agile experience has shown are more crucial to 
success in software development.  Hence, we can interpret the four value statements in the manifesto 
as follows:
*	While clearly stated processes and tool automation are helpful in developing software, enabling 
and empowering individuals to collaborate and form high-performance teams is more 
beneficial.
*	While detailed, up-to-date documents (e.g. design, architecture, operations, and user 
documentation) are necessary, consumable software is a much better indicator of progress in a 
software development project.
*	While regulations and other legal considerations can dictate contractual agreements, both sides 
(e.g. end users and the development team) must have a collaborative partnership.
*	Since change is inevitable, software development must adapt to it, and in fact welcome it.  A 
prescriptive plan, such as a plan youÕd have for a Waterfall project is, by nature, resistive to 
change.
2.1.2	Agile Principals
The leaders who formulated the above manifesto then decided that there are twelve principals behind 
the values represented in the manifesto.  Here are those twelve principals:
1.	Our highest priority is to satisfy the customer through early and continuous delivery of valuable 
software. 
2.	Welcome changing requirements, even late in development. Agile processes harness change for 
the customer's competitive advantage. 
3.	Deliver working software frequently, from a couple of weeks to a couple of months, with a 
preference to the shorter timescale. 
4.	Business people and developers must work together daily throughout the project. 
5.	Build projects around motivated individuals. Give them the environment and support they need, 
and trust them to get the job done. 
6.	The most efficient and effective method of conveying information to and within a development 
team is face-to-face conversation. 
7.	Working software is the primary measure of progress. 
8.	Agile processes promote sustainable development. The sponsors, developers, and users should 
be able to maintain a constant pace indefinitely. 
9.	Continuous attention to technical excellence and good design enhances agility. 
10.	Simplicity--the art of maximizing the amount of work not done--is essential. 
11.	The best architectures, requirements, and designs emerge from self-organizing teams. 
12.	At regular intervals, the team reflects on how to become more effective, then tunes and adjusts 
its behavior accordingly. 
To bring the above principals to reality in software development, Agile methods offer light-weight, 
continually improving processes and best practices to guide an Agile team.   Consider how Scrum, for 
example, realizes those principles:
For principals 1 & 3: The Agile Team demonstrates to its Stakeholders, at the end of each Sprint, 
consumable functionality that the team has just built in that sprint.  
For principal 2: The stakeholders provide feedback that may lead to some changes in that functionality.
For principal 4 & 6: The Product Owner is a liaison between the Stakeholders and the Team, and works 
daily with the Team to provide details of User Stories.
For principal 5: Each Team member signs up to do tasks during the Sprint Ð neither the Scrum Master 
nor anyone else assigns tasks to the Team.  
For principal 7: The velocity of the Team, based on user stories completed to done-done, is the sole 
indicator of real progress, not writing documents or building models.
And so onÉ
2.2	Enterprise Agile
In the years that followed the above-mentioned introduction of Agile software development, many large 
organizations have had varying degrees of success in adopting Agile methods.  This is because large 
organizations typically have software development needs that are beyond whatÕs offered by regular 
Agile methods, such as:
*	Formal checks and approvals dictated by internal policies and/or governmental regulations. 

*	Necessity of coordination among myriad enterprise groups, such as architecture, infrastructure, 
and operations. 

*	Coordinating multi-team projects.
To increase the chances of success of large-scale deployments of Agile, other thought leaders in the 
software community have formulated various frameworks for enabling Agile methods to better suite the 
purposes of large, formal enterprises.  Among the better-known large-scale agile frameworks are 
Disciplined Agile Delivery (DAD) and Scaled Agile Framework (SAFe).
2.2.1	Disciplined Agile Delivery by Scott Ambler
Whereas regular Agile methods (such as Scrum and XP) focus on delivering working software frequently 
throughout the project without having specifically demarcated phases in the software development 
project, Disciplined Agile Delivery (DAD) adds pre- and post-phases to that cadence of frequent delivery 
of functionality.  
The pre-phase (Inception) enables the large, formal enterprise, among other things, to obtain formal 
approvals of the requirements from myriad stakeholders involved in the project, detail the requirements 
as dictated by regulations, align the projectÕs architecture and deliverables with the enterprise 
infrastructure and Governance, and build the projectÕs team in coordination with various the enterprise 
groups and departments.
The post-phase (Transition) enables the enterprise, among other things, to execute the set up of the 
production environment after obtaining the necessary approvals and provisions, deploy the solution to 
its end users according to a pre-approved plan, and facilitate the involvement of the operations team to 
monitor and maintain the delivered software.
The diagram below shows the phases of DAD and the activities within each phase.
 
For more information, see References.

2.2.2	Scaled Agile Framework by Dean Leffingwell
The Scaled Agile Framework (SAFe) adds two layers of managing software projects on top of the regular 
layer that contains an agile team.
The middle layer (The Program) facilitates the coordination of a multi-team agile project.  It adds a 
System Team (for System Testing) to a group of agile teams in a project Ð typically 1 System Team + 4 
agile teams in one project.  Whereas a single-team agile project produces working software typically 
every two weeks, this Program layer keeps and unifies that cadence for every team in the project, but 
also adds an overall planning session for all the teams, typically every 10 weeks. The System Team lags 
the rest of the agile teams, typically by two weeks, to conduct integration testing of what the other 
teams produce.
The Top layer (The Portfolio) facilitates the prioritization and selection among all proposed software 
projects in an enterprise.
The diagram below shows the layers of SAFe and the activities within each layer.
 
For more information, see References.
3	Agile at Fannie Mae
The Software Development Lifecycle (SDLC) Agile Methodology, which is an instantiation of the Software 
Development Life Cycle (SDLC) Standard, has adapted the Fannie Mae enterprise SDLC standard to suite 
the Agile approach.  This means, among other things, that the SDLC deliverables and the PQO 
checkpoints have been modified to incorporate Agile.  Establishing such consistency spares each Agile 
project having to work with their Agile and PQO coaches to struggle to map the SDLC, typically in an 
inconsistent manner, to Agile activities.
This playbook, together with the aforementioned SDLC Agile Methodology and its supporting artifacts, 
aims at helping Agile projects make significant improvements in the currently dominant state of Agile 
development at Fannie Mae. The current state is characterized by several shortfalls, as documented for 
Fannie Mae in a recent assessment conducted by an outside vendor.  The shortfalls are evident in 
inconsistent requirement processes, inadequate quality assurance, and ineffective project estimates.
Despite the above shortfalls, many mature Agile teams at Fannie Mae have been using Scrum for more 
than 10 years, achieving remarkably good results in their delivered solutions.  Aligning to a standard 
enterprise Agile process, as promoted by this playbook, will allow software development projects 
throughout Fannie Mae to leverage the excellent past performance of those mature Scrum teams while 
continuing to build or improve upon a solid foundation for success.

3.1	Enterprise Agile at Fannie Mae
Since Fannie Mae is a large, formal enterprise, it behooves it to adopt a scaled Agile approach.  The 
figure below shows a diagram of the phased structure of an Agile project, as presented in Fannie MaeÕs 
Software Development Lifecycle (SDLC) Agile Methodology.
 

The phases of the SDLC Agile Methodology can be briefly described as follows:
*	The Initiation Phase involves reviewing the project proposal to determine whether management 
should authorize resources to proceed with scoping and planning activities (Inception Phase). 
The proposal should describe the projectÕs purpose, identify expected benefits, and explain how 
the project supports the organizationÕs business strategies.
*	The Inception phase goals are: identifying initial requirements and release plan, setting up the 
infrastructure, assessing initial risks, establishing an architectural runway as needed, and 
identifying test strategy and test plans.
*	The construction phase continues planning, analysis and design throughout each of the sprints. 
In addition, unit and progression system testing are also incorporated into each of the sprints. 
Sprints are typically 2 to 4 weeks in length and remain fixed throughout the construction phase.
*	The System Test Phase conducts regression system testing, in order to ensure proper 
interoperability with other applications and systems.  Thorough testing is critical to ensuring 
systems meet organizational and end-user requirements.
*	The User Test Phase involves placing the application into a test environment that simulates 
production, and having business users validate functionality of special scenarios that were not 
easy to automate in the testing performed in the Construction and System Test phases. 
The phased approach depicted in the above diagram is similar to what DAD advocates (See section 
2.2.1).  For multi-team Agile projects, an approach similar to SAFe (See section 2.2.2) can be adopted by 
Fannie Mae.
The Agile Guidance in this playbook is based upon a hybrid Agile process that is similar to DAD. It allows 
for an ample period of time upfront (Initiation and Inception) to build requirements and architectural 
runways.  Such planning is missing from the regular Scrum process, but is crucial to a large, formal 
organization such as Fannie Mae.  Hence, further guidance in this playbook is based on the scaled agile 
structure of DAD and SAFe.
4	Agile Playbook
Just as in football, an Agile organization needs a playbook to coordinate the many roles and external 
resources involved in dynamic interplays.  By predefining plays, an Agile coach can direct the Team to 
execute against their strategy in a highly efficient and coordinated fashion.  Furthermore, the Team can 
flexibly adjust the plays to react to emerging challenges and opportunities.
This playbook is intended to be fairly comprehensive and may be used as the basis of an overall plan at 
various managerial levels of the Agile organization.  It does not, however, negate the need for good 
judgment on the part Agile project participants.  Again, just as in football, in addition to strategy, 
winning needs great players, preparedness and team spirit.  Great Teams know how to adapt and win!
The playbook is organized by the phases of the SDLC Agile Methodology.  Some Agile Teams may find it 
more appropriate to change the execution of certain plays from one phase to another.  Others may not 
have the need to use some of the plays Ð for example, a mature Agile Team would not need to prepare 
individual players for assuming the roles of Product Owner, Scrum Master or Development Team Ð they 
already know how to do that.
4.1	Warm Up
4.2	How to Capture Business Processes
4.2.1	How to Capture Business Processes in Use Cases
If the solution youÕre trying to build implements complex business processes involving myriad 
stakeholders, then consider using Use Cases to capture those processes.  Business Use Cases are 
particularly suited to portray the aggregate behavior that involves the interplay among the business 
actors (customers, partners, regulators, suppliersÉetc.) and the various business workers and business 
systems that work together to deliver that behavior.
4.2.1.1	Writing a Business Use Case
The following are the recommended sections for a detailed description of a business Use Case:
*	Brief Description:  A short paragraph (up to 3-4 lines) giving the gist of the results sought by 
business actors, and what the business does to meet the actorsÕ expectations.
*	Pre-Conditions: What must hold true for the Use Case to start (e.g. actor must be authorized to 
perform this action).
*	Basic Flow of Events: A step-by-step narration of how the Use Case starts, what the business 
actor does to initiate interaction with the business, then the steps the business performs, any 
subsequent back-and-forth between the actor and the business, and how the Use Case ends.
*	Alternate Flows: An alternate flow states from which basic flow step it branches, then a step-by-
step narration (similar in style to the basic flow), and then whether this alternate flow ends by 
rejoining the basic flow at a later step, or the Use Case ends.
*	Optional: Post Conditions: (If applicable) What must hold true at the end of the Use Case 
regardless of which flow was followed in the Use Case.  For example: All repositories must 
remain in synch.
*	Optional: Process Diagram.  If pictorial depiction (e.g. a UML activity diagram) of the business 
process would help stakeholders reach a consensus, then include it with the Use Case.
4.2.1.2	Reviewing a Business Use Case
If youÕre writing a business Use Case for your Agile project, then chances are you have several 
stakeholders whose approvals are necessary before development starts.  Hence, you need to invite 
those stakeholders to review your Business Use Cases.  The review can be done manually (e.g. each 
stakeholder comments on a Microsoft Word document) or under the auspices of a tool that tracks the 
notification of the participants, what changed in the review, and the conclusion of the review.

4.2.2	How to Prepare When Forming a Scrum Team
4.2.2.1	What is a Scrum Team
A Scrum Team is a group of closely collaborating individuals dedicated to delivering software that is of 
high value to its consumers.  The team spans all the skills necessary to deliver that software.  It is 
composed of a Product Owner, a Scrum Master, and a Development Team.  See Glossary for a definition 
of each of the three roles.
4.2.2.2	How to Become a Great Product Owner
4.2.2.2.1	Acquire Product Owner Skills
*	Attend a Scrum Workshop/Class.  See Solutions & Tools - Fannie Mae Agile Training 
Recommendation.
*	Attend a Product Owner Workshop/Class.  See Solutions & Tools - Fannie Mae Agile Training 
Recommendation.
*	To fortify your expertise in the business domain of the solution to be built in the project
o	Read any existing requirements of the solution or of similar existing solutions
o	Pick the brain of stakeholders involved in the solution
o	Observe how current end users interact with similar solutions/systems
4.2.2.2.2	Have the Right Product Owner Mindset
*	To be a successful liaison between business stakeholders and the Team, conduct Òmeet-and-
greetÓ in person or by phone with the stakeholders and the Team members.
*	If not sure youÕll be available to the Team on a fulltime or a near-fulltime basis, discuss with your 
line manager how you can increase your availability to the Team.
*	Make sure you understand that the working relationship with the Team is very collaborative as 
opposed to Òthrow-over-the-wall-requirementsÓ, which is prevalent in traditional Waterfall.
*	Establish a rapport as early as possible with the Stakeholders to help them resolve any 
contradictions in their respective needs.
*	Understand that Technical Stories often need equal footing with User Stories in the priorities of 
the product backlog.
4.2.2.3	How to Become a Great Scrum Master
4.2.2.3.1	Acquire Scrum Master Skills
*	Attend a Scrum Workshop/Class.  See Solutions & Tools - Fannie Mae Agile Training 
Recommendation.
*	Attend a Scrum Master Certification Class.  See Solutions & Tools - Fannie Mae Agile Training 
Recommendation.
*	For the software development practices (Analysis, Design, Coding, TestingÉetc.) with which you 
do not have familiarity, read an instructive book on the subject.  Seek recommendations for 
such a book from your Agile coach or other Scrum Masters at Fannie Mae.
4.2.2.3.2	Have the Right Scrum Master Mindset
*	Establish a rapport as early as possible with management to help the Team resolve any 
impediments they may face on a daily basis.
*	While the Scrum Master does NOT tell everyone what to work on (as contrasted with a 
traditional PM), you need to foster a team spirit with the Product Owner and the Team that 
goes beyond what teams experience in traditional Waterfall projects.
*	You can only do so much in motivating and encouraging Team members to adhere to the Scrum 
best practices.  Hence, be prepared to escalate any issues to the supervisor of any Team 
member who is hampering the efforts of the Agile Team.
*	Understand that the Scrum Master roll involves Òleg workÓ such as setting up Sprint Review 
meetings and maintaining physical or tool-based burndown charts.
4.2.2.4	How to Become a Great Development Team Member
4.2.2.4.1	Acquire Team Member Skills
*	Attend a Scrum Workshop/Class.  See Solutions & Tools - Fannie Mae Agile Training 
Recommendation.
*	For the software development practices (Analysis, Design, Coding, TestingÉetc.) with which you 
do not have familiarity, read an instructive book on the subject.  Seek recommendations for 
such a book from your Agile coach or other experienced Team members.
4.2.2.4.2	Have the Right Team Member Mindset
*	Clearly communicate to the other project participants the deep expertise you have in at least 
one software development practice (Analysis, Design, Coding, TestingÉetc.).  This will enable the 
Team members to count on your contribution in tasks involving such expertise.
*	Have a mindset of continuous learning to develop deeper expertise in software development 
practices, outside your own comfort zone.  Your teammates who are more experienced than 
you can help you as mentors in that regard.
*	Be willing to have a much higher degree of transparency to the business stakeholders who will 
see the results of your work at the end of every sprint.  Bo open to their feedback.
*	Remember that user stories are only place holders that serve as conversation starters between 
you and the Product Owner. Be prepared to continuously seek input from the Product owner to 
detail the user story functionality Ð donÕt guess what the details should be.
*	You will contribute Technical stories to the product backlog.  You will work with the Product 
Owner to prioritize the Technical Stories in conjunction with the User Stories.
*	The Scrum Master will not tell you on which tasks youÕll work.  Be prepared to sign up for tasks 
throughout the Sprint.
*	Do NOT make the Scrum Master come after you to keep your tasks updated with remaining 
hours Ð make that a daily habit of yours.
*	When you complete your Sprint tasks, check to see if you can help other team members with 
their tasks before you pull new stuff into the Sprint.

4.3	Initiation
4.3.1	How to Form a Scrum Team
4.3.1.1	What to Look for in a Great Product Owner
*	Expertise in the business domain of the solution
*	Ability to be a liaison between business stakeholders and the Team
*	Availability to work continually through each Sprint with the Team
*	Attitude for partnership with the technical resources on the Team
*	Compile stakeholder needs to carry out:
o	Formulating User Story Statements
o	Writing User Story Conditions of Satisfaction
o	Prioritizing User Stories together with Team-provided Technical Stories
4.3.1.2	What to Look for in a Great Scrum Master
*	Well-versed in the Scrum method
*	General expertise in all software development practices (Analysis, Design, Coding, TestingÉetc.)
*	Ability to be a liaison between management and the Team
*	Attitude for maintaining excellent team spirit with the Product owner and the Team
*	Skilled in problem solving, both internal to the Team as well as those involving external 
resources
*	Having good judgment to know when to motivate a lagging team member, vs. when to escalate 
to the team memberÕs line supervisor.
*	Willingness to effectively handle logistics (e.g. maintain burndown charts, set up Sprint Review 
meetingsÉetc.)
4.3.1.3	What to Look for in a Great Development Team Member
*	Deep expertise in at least one software development practice (Analysis, Design, Coding, 
TestingÉetc.)
*	General familiarity with all software development practices
*	Willingness to develop deeper expertise in software development practices, outside his/her own 
comfort zone.  This will help Fannie Mae build truly cross-functional Agile Teams.
*	Ability to focus on producing working software at the end of each Sprint.
*	Ability to interact with Product Owner to obtain user story details.
*	Ability to formulate Technical Stories concerning design and architecture.
*	Self-motivated to sign up for Story tasks.
*	Discipline to keep tasks updated with remaining hours.
*	Has the team spirit to help other Team members complete their tasks
*	When writing code, Willingness to be a senior/junior partner in pair programming
*	When writing code, Ability to check-in code on a daily basis into a Continuous Integration server.
4.3.1.4	What to Look for in a Great Agile Coach
*	Flexibility to tailor his/her coaching to the specific Fannie Mae software development 
environment
*	Willingness and competency to tailor Scrum (and scaled Agile methods when applicable) to the 
specific Fannie Mae software development environment by following the Fannie Mae SDLC Agile 
Methodology
*	Proven track record of coaching Agile Teams in similar environments
*	Ability to convey what needs to be done in a motivational, non-abrasive manner
*	Availability on a daily basis to the Team
*	Problem solving skills to handle the unexpected
*	Ability to justify recommendations on a results-oriented basis, rather than on a dogmatic basis
*	Judgment of knowing what to escalate to management when Team progress is less than desired

4.4	Inception
4.4.1	How to Convert a Business Process to User Stories
4.4.1.1	How to Convert Use Cases to User Stories
If Use Cases are available for the solution to be built in your project, or if youÕve written Use Cases for 
that purpose, you can use the detailed textual descriptions of those Use Cases to derive User Stories for 
your project.  Use Cases are an excellent tool for capturing interactions between actors and the business 
and/or the systems, narrating end-to-end functionality, and identifying all the alternate scenarios to 
ensure quality and readiness.  In particular, if your system is complex, Use Cases can be beneficial in 
understanding intended behavior.
4.4.1.1.1	Deriving User Stories from Use Cases
 
(The above figure is from http://scalingsoftwareagilityblog.com/use-cases-in-the-agile-enterprise-
requirements-information-model/)
The above figure shows how you can derive User Stories from Use Case scenarios.   If the scenario is 
rather simple, i.e. its functionality can be completed to Done-Done in one Sprint, you can capture the 
scenario in its entirety in one User Story (see Story 1 as an example in the above diagram).  Otherwise, 
break the scenario into small chunks of functionality, each of which captured in a separate User Story 
(see Stories 2 & 3 as examples in the above diagram).   
Furthermore, alternate scenarios are particularly useful in ensuring that you cover all expected 
functionality in your User Stories (see Stories 4 & 5 as examples in the above diagram).  User Stories 
derived from different scenarios can be implemented in the same Sprint, or (as the above diagram 
shows) in successive Sprints.
Hence, Use-Case scenarios can be used to understand where new stories are likely to be found.  
Moreover, Use cases can provide a logical way to sequence value delivery in big systems, Story by Story, 
Sprint after Sprint.
4.4.2	How to Manage the Product Backlog
4.4.2.1	WhatÕs in a Great Product Backlog
The Product Backlog represents a collection of all stakeholder(s) requests or work items for the 
application. Product Backlog items are represented as User Stories, defects and/or Technical Debt. The 
Product Owner collects, manages and prioritizes the Product Backlog based upon the significance of the 
work items. At the start of the Product Backlog in the Inception phase, and throughout the project, all 
stakeholders need to engage the Product Owner to ensure their particular work items are acknowledged 
and prioritized appropriately.
4.4.2.2	How to start a Product Backlog
The Product Owner (PO) starts the Product Backlog by adding User Stories solicited from the 
Stakeholders.  The PO can use traditional requirements elicitation techniques, which include interviews, 
questionnaires, user observation, workshops, brain storming, and derivations from use cases.  In the 
Inception phase, this is called building a Requirements Runway.  Architects/designers may add Technical 
Stories to the Product Backlog from its very beginning.
4.4.2.3	WhatÕs the TeamÕs Contribution to the Product Backlog
The Team then sizes this initial Backlog.  Once sized, the PO prioritizes the Stories on the Product 
Backlog based on business significance.  When the backlog includes Technical Stories, the PO should 
work with architects/designers to include the Technical Stories in the prioritization, giving them the 
attention they deserve Ð i.e. Technical Stories should not be treated as Òsecond-class citizensÓ.
4.4.2.4	How the Product Backlog Provisions each Sprint 
At the beginning of each Sprint, the Team pulls into their Sprint Backlog as many items from the Product 
BacklogÕs top (i.e. highest priority items) as they can commit to completing to Done-Done.  If the Team 
finishes its initially pulled items with time to spare in the Sprint, then the Team, and only the Team, may 
pull more items from the Product Backlog into the Sprint.
At the end of each Sprint, any item not completed by the Team may go back to the Product Backlog, or 
can be carried over to the next Sprint.  If it is returned to the Product Backlog, it may get reprioritized 
with the rest of the items on the Backlog.
4.4.2.5	How to Continually Groom the Product Backlog
Throughout the project, not just between Sprints, the PO continues to groom the Product Backlog, i.e. 
re-prioritize or add new items as more business needs change or are discovered, remove items that 
become irrelevant for the current release, and add Technical Stories/defects as they are discovered by 
the Team.  However, those changes become visible to the Team only during Sprint planning; during a 
Sprint, the Team remains oblivious to changes in the Product Backlog.
4.4.3	How to Manage the Release Backlog
4.4.3.1	WhatÕs in a Great Release Backlog
The Release Backlog represents a collection of all stakeholder(s) requests or work items for a specific 
release of the solution.  It is applicable only if the project plans to have more than one release, i.e. more 
than one subset of solution functionality in production, in the hands of end users.   Otherwise, the 
Product Backlog is all that is needed to keep a stack of stakeholder needs and other work items.
Release Backlog items are represented as User Stories, defects and/or Technical Debt. The Product 
Owner collects, manages and prioritizes the Release Backlog based upon the significance of the work 
items. In the Inception phase, only the first Release needs to have a set of Stories Ð for later releases, it 
is sufficient to have only high-level objects for each Release.  Starting with the Inception phase, and 
throughout the project, all stakeholders need to engage the Product Owner to ensure their particular 
work items are acknowledged and prioritized appropriately.
4.4.3.2	How to start a Release Backlog
The Product Owner (PO) starts the Release Backlog by adding User Stories solicited from the 
Stakeholders.  The PO can use traditional requirements elicitation techniques, which include interviews, 
questionnaires, user observation, workshops, brain storming, and derivations from use cases.  Before 
starting the Sprints that would implement the Release, this is called building a Requirements Runway.  
Architects/designers may add Technical Stories to the Release Backlog from its very beginning.
4.4.3.3	WhatÕs the TeamÕs Contribution to the Release Backlog
The Team then sizes the Release Backlog.  Once sized, the PO prioritizes the Stories on the Release 
Backlog based on business significance.  When the backlog includes Technical Stories, the PO should 
work with architects/designers to include those in the prioritization, giving them the attention they 
deserve Ð i.e. Technical Stories should not be treated as Òsecond-class citizensÓ.
4.4.3.4	How the Release Backlog Provisions each Sprint
At the beginning of each Sprint, the Team pulls into their Sprint Backlog as many items from the Release 
BacklogÕs top (i.e. highest priority items) as they can commit to completing to Done-Done.  If the Team 
finishes its initially pulled items with time to spare in the Sprint, then the Team, and only the Team, may 
pull more items into the Sprint from the Release Backlog.
At the end of each Sprint, any item not completed by the Team may go back to the Release Backlog, or 
can be carried over to the next Sprint.  If it is returned to the Release Backlog, it may get reprioritized 
with the rest of the items on the Backlog of the current Release, or postponed to later Releases.
4.4.3.5	How to Continually Groom the Release Backlog
Throughout the project, not just between Sprints, the PO continues to groom Release Backlogs, i.e. re-
prioritize or add new items as more business needs change or are discovered, remove items that 
become irrelevant for the current release, and add Technical Stories/defects as they are discovered by 
the Team.  However, those changes become visible to the Team only during Sprint planning; during a 
Sprint, the Team remains oblivious to changes in the Release Backlog.
4.5	Construction
4.5.1	How to Do Sprint Planning
4.5.1.1	WhatÕs a Reasonable Time to Allocate to Sprint Planning
The Scrum Master schedules the Sprint Planning to occur on the first day of the Sprint, and invites the 
Product Owner and all Team members.  For the first few Sprints, up to four hours should be scheduled 
for that activity; once the Team gels after a few Sprints, the scheduled time for Sprint Planning can be 
reduced.
4.5.1.2	How Does the Team Build the Sprint Backlog
The Team starts building its Sprint Backlog by placing in it as many items from the Product BacklogÕs top 
(i.e. highest priority items) as they can commit to completing to Done-Done.  The items can be User 
Stories, defects, or Technical Stories.  The total size (in Story Points) of items pulled into the Sprint 
Backlog should be as follows:
*	For the first Sprint, the Team does its best to estimate how many Story Points it can finish to 
Done-Done.  This estimation can be made using traditional techniques, or can be just a guess at 
this point!
*	For subsequent Sprints, the total point size of initially pulled items should not exceed what the 
Team was able to get Done-Done in the previous Sprint, or average of the previous few Sprints.  
This is known as the Velocity of the Team.  This restriction stipulates that Team composition and 
availability remains stable from Sprint to Sprint.  Otherwise, the total size of the initial Sprint 
Backlog can be adjusted accordingly. 
It is important to keep in mind that Team velocity typically ramps up for the first 3 to 4 Sprints in 
Construction, and become steady after that.  This is especially true for a newly formed Team, 
working on an unfamiliar business domain, and working with new technology.

4.5.1.3	How to Identify Tasks for Done-Done
Once the Team builds the Sprint Backlog, they break each item into tasks covering each activity involved 
in completing the item (e.g. analysis, design, coding, unit testingÉetc.), and let individual Team 
members sign up to own each task.  Each task owner estimates the taskÕs level of effort in hours, and 
notes that estimate on the task.  The tasks should include all that is needed to bring the item to being 
Done-Done.
4.5.1.4	How to Optimize Team Efficiency
To minimize the down time of different Team members, the Team may layout the stories in a timeline 
fashion to ensure all members are working as soon as possible.  For example, if developers start working 
only on the larger stories, that may delay the testers validating the stories and possibly getting squeezed 
at the end.  Instead, the Team may start with a couple of smaller stories to engage the testers sooner 
rather than later.
4.5.1.5	How to Bring the Velocity Effect to Full Circle
When all the tasks of an item are completed, the item is moved to the Done-Done status, and is counted 
in the Velocity of the Team for that Sprint.  This velocity will affect the size of Sprint backlogs of 
subsequent Sprints.
4.5.1.6	Is the Team Limited by the Initial Sprint Backlog
If the Team finishes its initial Sprint Backlog with time to spare in the Sprint, then the Team, and only the 
Team, may pull more items into the Sprint from the Product Backlog or Release Backlog.

4.5.2	How to Ensure Code Quality
4.5.2.1	WhatÕs the Big Deal about Code Quality
A main impetus of applying Agile best practices is to maintain high-quality code from the first day the 
code is written.  The four values of the Agile Manifesto clearly indicate that working software is 
paramount for gauging progress.  In Scrum, this is realized by having the team demonstrate their work 
to business stakeholders at the end of each Sprint to get their approval of the projectÕs progress.  This 
maintains a feedback loop that is tantamount to a safety net for the whole project, protecting it from 
grinding to a halt due to quality issues.
Whereas this play starts in the Construction phase, it continues (as the below subsections show) until 
the code is delivered to end users and beyond.  Several Agile best practices help achieve that objective.  
Please see Processes & Practices for more information on the practices mentioned in the subsections 
below.
4.5.2.2	What can Developers Do for Quality
*	Pair Programming. With Pair Programming, the code gets checked with a second pair of eyes 
from the instance itÕs written.  As the Driver writes the code, the Navigator simultaneously 
inspects the code for good logic and adherence to coding standards.  This can head off a 
significant number of defects that otherwise only get detected later in testing.
*	Code Review.  Even if the Team does not practice Pair Programming, they should include a task 
for Code Review in every User Story that involves coding.  Such a task would ensure that the 
code has sound logic and follows the coding standards.  This task has to be completed before 
the User Story can be considered Done-Done.
*	Test Driven Development.  TDD prompts developers to write every line of code specifically to 
meet a pre-written test.  Hence, no code is written unless it is to pass a test.  Such tests always 
include unit tests, and can even include integration tests if itÕs feasible to use the actual 
interacting components or stub their interfaces.  Having to pass a test from the instance itÕs 
written is bound to produce the code with high quality.
*	Unit Testing.   Even if the Team does not practice TDD, every developer on the Team must unit-
test his/her code before the relevant User Story is Done-Done.  To ensure unit testing is 
performed, a task can be created under the User Story specifically for unit testing.  This way, 
every developer will have the responsibility for maintaining quality in his/her code, and not just 
Òpass the buckÓ to testers after the code is written.
4.5.2.3	What can Testers Do for Quality
*	System/Integration Testing.  The Team is expected to perform automated, progression 
System/Integration testing every Sprint for the User Stories in that Sprint.   For complex projects 
involving more than one Scrum Team, a separate Team dedicated to System Testing, as specified 
in SAFe, can be formed to lag the other Teams by one Sprint to integrate and System Test their 
deliverables.   
Performing progression System Testing throughout the project would significantly alleviate the 
Òbig bangÓ effect, when such testing is done only late in the project.  Continual System Testing 
would make defect fixing much more manageable, thus increasing code quality.
*	Regression Testing.   Following the Construction phase, testers perform automated Regression 
System Testing on the entire code base.   This ensures that existing functionality in the same 
system, as well as in interacting systems, has not been negatively affected by this solution.  This 
automated Regression Testing, together with previously performed progression System Testing, 
allows the later User Acceptance Testing to focus only on manual, special scenarios, thus 
significantly reducing the time required for UAT and improving its chances of discovering 
esoteric defects.
4.5.2.4	What can Users Do for Quality
*	User Acceptance Testing.  Just before releasing the solution into production, a group of users 
perform manual tests of special scenarios that could not have been easily automated during 
progression or Regression System Tests.  Since the vast bulk of functionality has already been 
covered in earlier phases, users can focus on investigative and special scenarios to grant final 
approval of the quality of the solution.
4.5.3	How to Conduct a Retrospective
4.5.3.1	Benefits of a Retrospective
As an Agile process, Scrum enables and empowers Agile Teams to continually seek ways to improve their 
development approach.  In most software development projects, at least a few of the initial 
assumptions, both in functionality and in managing the project can change significantly after the start of 
the project.  Hence, it very much behooves the team to regularly hold Sprint Retrospective meetings to 
examine what is working well vs. what needs to improve in their development approach.  Such continual 
improvement can increase the chances of success of the project.
4.5.3.2	Organizing a Sprint Retrospective
Since Sprint Retrospectives occur regularly at the end of each Sprint, the Scrum Master can schedule 
those meetings for several weeks ahead of time.  Only the Team, the Product Owner and the Scrum 
Master participate in the Sprint Retrospective Ð other Stakeholders do not need to attend, or can attend 
strictly as observers.
To make sure that everyone gets a chance to provide feedback in the Retrospective, it is highly 
recommended that the participants follow the NOSTUESO rule, which stands for ÒNo One Speaks Twice 
Until Everyone Speaks OnceÓ.  The Scrum Master facilitates the meeting, and captures the following.
*	What worked well, and hence should be continued.  This is particularly important for things that 
may have started as counter to the organizationÕs culture.  For example, having the Product 
Owner work pretty much fulltime with the Team may be highly frowned upon by the middle 
management, but showing that it is very much increasing the efficiency and effectiveness of the 
development may help to change the organizationÕs view in this regard.
*	What did not work well, and hence should be improved.  It is very important that all participants 
feel safe in suggesting improvements, as long as their suggestions are presented in a non-ad 
homonym manner.  If the improvement requires resolving an impediment that involves 
resources external to the Team, the Scrum master owns the realization of the improvement.  
Otherwise, any participant in the Retrospective can sign up to be the owner of realizing an 
improvement.  The Team agrees on a due date by which the improvement should be achieved 
to allow the Team to meet its current product/release commitments.
*	Follow up on previously-identified improvements.  Owners of such improvements bring the 
participants up to date on progress achieved in realizing the improvement.
4.5.3.3	Examples of What Needs Improvement
*	Organizational.  These Improvements generally require help from management; hence the 
Scrum Master usually owns them.
o	Less than desired availability of project participants
o	Inability to access external resources such as database administrators
o	Delays in needed tools or hardware
*	Technical
o	Solution needs higher skills than whatÕs available from the Team.  Improvement: pair 
senior Team members with less experienced members, send members to Training, or 
temporarily add external resources to the Team
o	Incompatibilities with infrastructure.  Improvement: may need to increase scope to 
accommodate extra work to resolve such incompatibilities.
4.6	System Integration Testing (SIT)
4.7	User Acceptance Testing (UAT)
4.8	Implementation
5	Processes & Practices
5.1	Code Review
The best practice of Code Review provides quality assurance that goes beyond unit testing.  It ensures 
that programming code follow sound logic, and meet enterprise-adopted coding standards.  Following 
sound logic can head off many defects that would have to be detected later in testing. Furthermore, 
adhering to code standards facilitates, among other things:
*	Collective ownership of the code.   When code is written following a standard, various 
developers are much more able to contribute to that code at different times.  For example, 
circumstances during a Sprint may call for changing owners of a coding task among Team 
members Ð the subsequent owner is much more able to seamlessly take ownership and 
contribute to the code if it was written according to standards. 
*	Better maintenance of code.  As the solution evolves, even after delivery into production, 
enhancements and defect fixing can be achieved much more effectively and efficiently if we 
ensure that all programs adhere to coding standards. 

Code Review can be automated on-demand, performed in a formalized work flow, or in a simple, 
manual fashion.   Tools for on-demand, automated Code Review compare code written by a Team 
member to a set of enterprise-adopted coding standards, and report any violations of the standards.
If required by regulation and/or if the Agile Team is distributed, Code Review can be done under the 
auspices of a tool that tracks the notification of the participants, what changed in the Review, and the 
conclusion of the Code Review.
Manual Code Review, which can be performed in addition to or in lieu of automated Code Review, can 
be done using one or more of the following:
*	If the Agile Team is practicing pair-programming, the Navigator, who looks Òover the shouldersÓ 
of his/her partner as the partner writes the code, can continually point out how the code can be 
improved to adhere to the enterprise coding standards.
*	In lieu of, or in addition to Code Review that happens in pair-programming, every User Story 
that involves writing code should include a task specifically for Code Review to allow a Team 
member other than the one who wrote the code to Òeye-ballÓ the code to check adherence to 
coding standards.
*	You may assign a status of ÒNeeds Code ReviewÓ to a User Story that involves writing code.  The 
status cannot be cleared or changed to Done-Done unless the Code Review is performed.  Note 
that adding extra statuses to User Stories adds formality and hence counters the spirit of Agile.  
However, you still may want to use it if it becomes necessary to make some activities more 
prominent to the Team.
 

Please see Solutions & Tools Ð Code Review on implementation of this practice in the Fannie Mae 
environment.

5.2	Pair Programming
Pair Programming is the practice of having two developers work simultaneously on writing the same 
code.  The first does the actual writing of the code, and is called the Driver.  The second looks over the 
shoulder of the Driver, and is called the Navigator.  The latter provides a second pair of eyes to discern 
the code as it gets written, contributing the following benefits:
*	Increasing the likelihood that the code follows good logic, hence decreasing defects that would 
have to be discovered only later in testing.
*	Ensuring that the code follows the Coding Standards adopted by the Team.
*	Performing Code Review that supplements, or even supplants, Code Review tasks that would 
have to be included for each applicable User Story.
*	Sharing knowledge, especially when one of the two partners in pair programming is more 
experienced than the other.

As evident from the above advantages, Pair Programming is synergistic with other Agile best practices, 
such as Code Review, Coding Standards and Collective Code Ownership.
One of the main challenges facing the adoption of Pair Programming in an Agile Team is convincing 
management that investing the time of two programmers simultaneously writing the same code can pay 
dividends within same project.  Empirical evidence from the experience of Agile projects at Fannie Mae 
and elsewhere has shown that such investment is well worth it for reducing code defects, ensuring 
adherence to standards, and enhancing development knowledge of Team members.
Please see Solutions & Tools  - Pair Programming for implementation of this practice in the Fannie Mae 
environment.

5.3	Collective Code Ownership
Collective Code Ownership (CCO) is the practice that epitomizes a Team spirit dedicated to delivering 
high-value code; every Team member demonstrates his/her personal responsibility towards that goal for 
the entire solution code.  To realize that objective, every developer on the Team should (ideally) be able 
to maintain (i.e. debug or enhance) any part of the code on a short notice.
When the Team can have any developer work on any part of the solution code on a short notice, the 
effectiveness and efficiency of the Team can substantially increase, and the cost can decrease for 
delivering high-quality code that meets the needs of the end users.
While Pair Programming is very much in the spirit of CCO, the latter goes beyond Pair Programming.  It 
requires that all developers have substantive knowledge and competent experience to work with all 
parts of the solution code.  That usually requires that (at least some of) the developers have to acquire 
skills beyond their current comfort zone.  The developers can extend their current skills via Pair 
Programming, and mentorship from more experiences developers, among other means.
In reality, such acquisition of knowledge and experience happens over several Sprints, several releases, 
or even several projects.  However, knowledge enhancement has to be a continual objective of 
developers for the Team to succeed with the practice of CCO.
Please see Solutions & Tools  - Collective Code Ownership for implementation of this practice in the 
Fannie Mae environment.

5.4	Test Driven Development
Test Driven Development (TDD) is the practice of developers coding tests, and then coding the solution 
software to which the tests apply.  The tests are then immediately run to ensure that the code pass the 
tests.  This is done in small code increments, thus gradually augmenting the tests and the solution 
software.  The benefits of this practice are:
*	Capturing in the tests the specification of what the code must do, and then coding to that 
specification.
*	Driving the programming of the solution so that it only contains code that performs what is 
expected in the tests, and no other unneeded code.   Unneeded/unused code can clutter the 
programs, exacerbating the efforts of debugging the code and maintaining quality.
*	Building quality in the code from the instant the software is written Ð i.e. there is virtually no 
elapsed time between writing the solution code and testing it.  This minimizes the chance of 
lingering defects, and ensures excellent code coverage, at least in unit tests.

While TDD is commonly performed for unit tests, it can also include integration tests when it is feasible 
to either use actual interacting components, or stub their interfaces.
TDD can be used most successfully to test code for which industry-standard automation is available (e.g. 
JUnit for Java code).  It becomes more challenging to apply if standard automation for TDD is not 
available (e.g. for development in Microsoft SharePoint).  In those more challenging situations, the Team 
may attempt to use proprietary/home-grown solutions for TDD.
The practice of TDD can be used synergistically with other best Agile development practices.  For 
example, the practice of Refactoring, which improves code structure without changing its behavior, 
should be used with TDD.  Refactoring can ensure that, as code is gradually incremented in TDD, it 
maintains sound design and architecture.
Please see Solutions & Tools  - Test Driven Development for implementation of this practice in the 
Fannie Mae environment.
5.5	Refactoring
Refactoring is the practice of improving the structure of code to more closely follow sound design and 
architecture without changing the codeÕs behavior.  Story after Story and Sprint and Sprint, as code is 
added, bad structure almost always seeps into the code.  If the Team does not proactively refactor the 
code to remedy bad structure, Technical Debt can accumulate in the code, making it harder to read and 
maintain.
Some of the common Refactoring techniques are: creating a more general type to allow code sharing, 
replacing conditionals with polymorphism, breaking down code into smaller pieces to improve 
understandability and usability, and pulling up or pushing down a method in an inheritance hierarchy.
If the Team is practicing Test Driven Development (TDD), Refactoring can happen naturally in the cycle 
of: code a test, write just enough code to make it pass, refactor the code, and repeat.  With or without 
TDD, however, the Team should frequently implement Technical Stories that keep sound design and 
architecture in their solutionÕs code.  TDD can significantly reduce the need for such Technical Stories, 
but the Team cannot count on eliminating them altogether.
To ensure that Refactoring sticks to its main premise of improving only the code structure without 
changing the code behavior, especially if the Team is not using TDD, it is crucial that unit tests and 
integration tests that passed before the refactoring are run again until they pass again.  Furthermore, if 
refactoring involves major changes in design or architecture, the changes should be discussed with the 
Team, and perhaps even with external resources, such as Enterprise Architects and technical owners of 
interacting systems, before being implemented.  Re-running previously passed tests and early discussion 
with senior resources would help alleviate risks that are inherent in Refactoring.
In addition to TDD, Refactoring is synergistic with other best Agile practices.  For example, it can be 
practiced in Pair Programming and Code Review, and enforced in Coding Standards.
Please see Solutions & Tools  - Refactoring for implementation of this practice in the Fannie Mae 
environment.

5.6	Coding Standards
Coding Standards are guidelines that regulate the coding style of a programming language.  They cover 
programming aspects such as declarations, statements, comments, naming conventions, and how to 
apply architectural best practices.  Coding Standards enhance code structural quality as well as its 
readability and maintainability.
While still compile-able, code that violates the Standards can be much harder to reader and maintain.  
Hence, it is important that the Team diligently apply a well-rounded set of Coding Standards.
And whereas Coding Standards per se do not guarantee defect-free code that meets user needs, they 
significantly enhance code quality and reduce development cost.  This is because as code is maintained 
by different developers at different times, developers subsequent to the one who originally wrote the 
code can then see code that follows familiar structure and style, making their work substantially more 
efficient and effective.
As the Team selects the appropriate Coding Standards for their development environment (e.g. Java, 
JSP, COBOLÉetc.), the standards can be synergistic with other Agile best practices.  For example, they 
can be enforced in Code Review tasks and Pair Programming, and facilitate Collective Code Ownership.

Please see Solutions & Tools  - Coding Standards for implementation of this practice in the Fannie Mae 
environment.

5.7	Continuous Integration
Continuous Integration (CI) stipulates that developers check in changes to their code frequently, and 
integrate the system to verify that the solution always builds successfully.  This allows all developers to 
work on the latest version of the software. 
The main preposition of CI is that it ensures constant code integrity.  Code integrity means that the code 
always successfully compiles, links, and passes unit and system tests.  This realizes the one of the basic 
premises of Agile:  the code (with some added overhead) can always be released on demand.
Developers on the Agile Team must acquire the habit of checking in their code very frequently.  This is in 
contrast to many, perhaps most, of traditional projects where integrating code happens much less 
frequently, and typically very late in the project.  The late, infrequent integration leads to tremendous 
efforts Ð up to several weeks Ð of trying to achieve code integrity.  CI aims to eliminate that serious 
shortfall. 
Please see Solutions & Tools  - Continuous Integration for implementation of this practice in the Fannie 
Mae environment.
6	Solutions & Tools
6.1	Code Review
6.2	Pair Programming
6.3	Collective Code Ownership
6.4	Test Driven Development
6.5	Refactoring
6.6	Coding Standards
6.7	Continuous Integration
CI can be done in an Automated or Manual manner.
Automated CI happens when each developer on the Agile Team checks his/her code frequently Ð as 
frequently as more than once a day.  With every code check-in, the server runs the build scripts and all 
automated unit, integration and system (progression and regression) tests that are available at the time 
of each build, and reports any failures in the scripts of the tests.  The figure below shows that scenario.
 
To succeed with automated CI:
*	Developers must continually write automated unit tests hand-in-hand with writing their code, 
thus keeping up-to-date the set of unit tests the CI server runs with every build. 

*	Testers must continually work with developers to write automated system tests for each 
functionality delivered at the end of each Sprint, keeping up-to-date the set of system tests the 
CI server runs with every build.  This is in contrast to most, perhaps all, traditional projects 
where testers get involved in running the system tests only late in the project.


Even without a CI server, every developer on an Agile Team can and should (manually) practice 
Continuous Integration.  Manual CI can still achieve a significant part of the benefits of automated CI by 
discovering failures as early as possible, when there is less code to contend with to implement a fix. The 
following are generic steps that can be followed in that regard:
1.	As frequently as possible, when a developer is ready to check in his/her code, the developer 
updates his/her local development ÒsandboxÓ from the development common area with the 
latest version of all other solution parts. 

2.	The developer performs a build on his/her local environment, and fixes any errors in his/her 
latest code that may be breaking the build. 

3.	Once the solution builds successfully, the developer ensures that the common area has not 
changed while he/she was fixing errors in his/her local build.  Otherwise, the developer repeats 
the above steps. 

4.	The developer places an indicator (e.g. a flag, or a toy) at his/her workstation informing the 
other developers that they should not check in any code while he/she has that indicator. 

5.	The developer checks in his/her code, builds the solution in the common area (which should 
proceed without errors after the above steps) and runs integration/system tests on the new 
build. 

6.	The developer logs any failures of the above tests, and releases the indicator that was ceased in 
step 4 above.
6.8	Fannie Mae Agile Training Recommendation
7	References
[Ambler 2012] Ambler, Scott. 2012. ÒDisciplined Agile Delivery.Ó 
http://www.disciplinedagiledelivery.com/
[Ambler 2012] Ambler, Scott. 2012. Disciplined Agile Delivery: A Practitioner's Guide to Agile Software 
Delivery in the Enterprise. Boston, MA: Pearson Education, Inc.
[Cohn 2005] Cohn, Mike. 2005. Agile Estimating and Planning. Upper Saddle River, NJ: Prentice Hall
[Leffingwell] Leffingwell, Dean.2013. ÒScaled Agile Framework (SAFe)Ó 
scaledagileframework.com
[Leffingwell 2011] Leffingwell, Dean.2011.Agile Software Requirements: Lean Requirements Practices for 
Teams, Programs and the Enterprise (Agile Software Development Series). Upper Saddle River, NJ: 
Addison-Wesley 
http://scalingsoftwareagilityblog.com/agile-requirements-the-book/
[Adzi  2011] Adzi, Gojko.2011.Specification by Example:  How Successful Teams Deliver the Right 
Software. Shelter Island, NY: Manning Publications Co. 
http://www.specificationbyexample.com/

8	Glossary
ITEM
Description
Agile
Genre of light-weight software development processes that emphasize collaborative 
interaction among team members and with their business partners, using working 
software as the only indicator of real progress in a project, and adapting to change 
throughout the project.
Agile Manifesto
Declaration by software development thought leaders in 2001 that stated the 
common values of the Agile methods independently practiced by those leaders.
Conditions of 
Satisfaction
Also known as ÒAcceptance CriteriaÓ.  Set of verifiable requirements to be met by the 
completed User Story.
Continuous 
Integration(CI)
Frequent building (typically more than once a day) and testing of the software being 
developed by the Team in order to catch failures as early as possible.  
Daily Scrum
Daily 15-minute stand-up meeting, during which each Team member states what 
he/she has done since the last daily Scrum, what he/she plans to get done by the 
next daily Scrum, and what impediments, if any, he/she is facing. 
Done-Done
Indication that an item from the Product Backlog was completed not just in coding 
(which is traditionally the concept of Done), but also in unit and system testing, in all 
impacted documentation, and is demonstrable to stakeholders.
Emergent Design
Design that gradually builds up as code is written and re-factored each Sprint.  This is 
in contrast to Waterfall design, which is done in one fell swoop early in the software 
development project.
Five-Finger 
Voting
Technique for attempting to reach Team consensus.  Each Team member shows 
from 1 to 5 fingers to indicate his/her agreement/disagreement with a Team 
decision.  5 fingers = great idea, whole-heatedly agree; 4 fingers = agree; 3 fingers = 
neutral; 2 fingers = disagree, but wonÕt prevent the team from going forward with 
the decision, but I reserve the right to say later ÒI told you soÓ; 1 index finger = veto, 
canÕt let you go through with it, letÕs take the issue offline.
Pair 
Programming
Approach of writing code that has one partner (the Navigator) looking over the 
shoulder of another (the Driver), as the latter writes programs.  Produces higher-
quality code (less defects, adheres to standardsÉetc.) as Òtwo pairs of eyes are 
better than oneÓ.
Planning Poker
Technique for sizing User Stories.  The Team discusses each User Story for a few 
minutes, and then each Team member holds a card to the team showing the size in 
Story Points he/she thinks the User Story should have.  If the differences in sizes are 
too great, the exercise repeats only one more time to try to narrow the differences; 
otherwise, the Team uses Five-Finger Voting.
Playbook
Guide for Scrum projects to perform various activities throughout the phases of the 
Fannie Mae SLDC Agile Methodology.
Prescriptive 
Process
Process that specifies upfront, in detail, each activity in a software development 
project, rather than empowers the project team to respond to change, and to adapt 
their process as they discover better ways to develop their solution.
Product Backlog
Stack of items (e.g. User Stories, DefectsÉetc.) prioritized (highest priority on top) by 
the Product Owner, ready for the Team to pull from its top into their Sprint, typically 
during Sprint planning.
Product 
Burndown Chart
Curve that is updated at end of each Sprint showing how much work (in Story points) 
is left to get the solution done.  To show progress, curve should be trending 
downwards.
Product Owner
Also known as ÒCustomerÓ.  Role that represents the business needs to be 
implemented by the Agile Team.  Works with the Team to detail User Stories.
Release
Portion of the solution that can be put into production for the end users.  The Agile 
approach emphasizes releasing early and frequently for competitive and feedback 
advantages.
Release Backlog
Similar to Product Backlog, but contains items targeted for a specific Release of the 
solution.
Release 
Burndown Chart
Similar to Product Burndown Chart, but only for items targeted for a specific Release 
of the solution.
Scrum 
An Agile process that uses a series of development time-boxes, called Sprints. At the 
end of each Sprint, the development team demonstrates the functionality to 
business stakeholders, and conducts an introspective to improve their development 
process.
Scrum Master
Also known as ÒTeam LeaderÓ.  Role that ensures the Agile Team apply the Scrum 
Process.  Primarily responsible for resolving Team impediments on a daily basis.
Sprint
Also known as ÒIterationÓ.  Time-boxed period of software development in a Scrum 
project Ð typically 2 to 4 weeks.
Sprint Backlog
Set of items (User Stories, Technical Stories, DefectsÉetc.) that the Team pulls from 
the Product Backlog into a Sprint.  Set is only as large (in total Story Points) as the 
Team can commit to getting Done-Done.
Sprint Burndown 
Chart
Curve that is updated daily showing how much work (in hours) is left to get the 
Sprint Backlog Done-Done.  To show progress, curve should be trending downwards.
Sprint Planning
Meeting at beginning of Sprint during which the Team pulls from the top of the 
Product Backlog as many items as they can commit to getting Done-Done during the 
Sprint.  The Team breaks each item into tasks.  For each task a Team member signs 
up and estimates level-of-effort in hours.
Sprint 
Retrospective
Meeting at end of Sprint during which the Team, Product Owner and Scrum Master 
decide what needs improvement in their development approach, and how to realize 
that improvement.
Sprint Review
Meeting at end of Sprint during which the Team, Product Owner and Scrum Master 
demonstrate to Stakeholders what was implemented during that Sprint.  
Stakeholders provide feedback that can lead to changes.
Stakeholder
Person having a direct, or indirect, interest in the results of a software development 
project.
Story Point
A unitless count indicating the relative size of each item on the Product Backlog.  Size 
is proportional to effort and complexity of completing the item, and is determined 
using Planning Poker. 
Team
Cross-functional group including all skills necessary to build the software solution.  
Each Team member ideally possesses more than one skill of software development 
(e.g. analysis, coding, design, testingÉetc.) and hence can own more than one type 
of Sprint tasks.
Technical Debt
Deterioration in the solution design and architecture that often happens as code is 
added Sprint after Sprint.  It needs to be resolved frequently in Technical Stories lest 
it renders the solution unmaintainable, or even non-functional.
Technical Story
Whereas User Stories represent business needs, Technical Stories are items 
concerning Technical Debt, executing/stabilizing architecture, and other functional 
and non-functional aspects of the solution that may not be directly observable by 
the Stakeholders.  Technical Stories are usually formulated by the Team or external 
resources such as Architects and Database Administrators.
Test-Driven 
Development 
(TDD)
An initial Unit Test is written by a developer before writing the corresponding chunk 
of code.  The test fails at first due to absent code.  Then only enough code is written 
to make the initial, rudimentary test passes, then the unit test is augmented by a 
small amount, then code is augmented to pass it, and so on.  Code needs frequent 
refactoring to eliminate any Technical Debt.
Use Case
A Business Use Case describes a sequence of actions a business performs that yields 
an observable result of value to a particular business actor.
User Story
Brief statement representing a need of a Stakeholder.  Serves as a conversation 
starter between the Team and the Product Owner to detail the functionality to be 
built to satisfy the User Story.  Has Conditions of Satisfaction to judge completion.
Velocity
Measure of how much work the Team was able to truly complete in a Sprint.  At the 
end of each Sprint, it is the sum of the sizes in Story Points of the User Stories that 
the Team was able to get Done-Done.
Waterfall
Software development methodology that was formalized in the early 1970s.  It 
involves completely finishing each aspect of software development before starting 
the next, e.g. completing requirements, then completing design, then completing 
code, then completing testing.
XP
Stands for ÒExtreme ProgrammingÓ.  Set of nimble software development practices 
that include User Stories, Emergent Design, Pair Programming, Continuous 
Integration and Test-Driven Development.
